{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { addToLocal } from \"../shared/functions\";\nimport { UID } from \"../shared/constants\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/firestore\";\nimport * as i2 from \"@angular/router\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(afs, router) {\n      this.afs = afs;\n      this.router = router;\n      this.userCollection = this.afs.collection(\"users\");\n      this.emailCollection = this.afs.collection(\"emails\");\n      /**\r\n       * Create a new user on signup and navigate to dashboard\r\n       * @param user\r\n       * @param userId\r\n       * @param successRedirectURL\r\n       */\n\n      this.createNewUser = (user, userId, successRedirectURL) => __awaiter(this, void 0, void 0, function* () {\n        yield this.userCollection.doc(userId).set(Object.assign({}, user)).then(() => {\n          addToLocal(UID, userId);\n          this.router.navigate(successRedirectURL);\n        }).catch(error => {\n          console.error(error);\n        });\n      });\n      /**\r\n       * Fetch all the users in the collection.\r\n       */\n\n\n      this.fetchAllUsers = () => {\n        return this.userCollection;\n      };\n      /**\r\n       * Fetch user that matches uId\r\n       * @param uId\r\n       */\n\n\n      this.fetchUserByUId = uId => {\n        return this.fetchUserByAttribute(\"uId\", uId);\n      };\n      /**\r\n       * Fetch users that have values matching the attributes.\r\n       * @param attribute\r\n       * @param value\r\n       */\n\n\n      this.fetchUserByAttribute = (attribute, value) => {\n        if (attribute && value) {\n          return this.userCollection.ref.where(attribute, \"==\", value);\n        }\n\n        return undefined;\n      };\n      /**\r\n       * Update the user the user provided.\r\n       * @param user\r\n       */\n\n\n      this.updateUser = user => __awaiter(this, void 0, void 0, function* () {\n        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n          yield this.userCollection.doc(user.uId).update(Object.assign({}, user)).then(() => {\n            resolve(true);\n          }).catch(error => {\n            reject(error);\n          });\n        }));\n      });\n      /**\r\n       * Delete the user.\r\n       * @param user\r\n       */\n\n\n      this.deleteUser = user => __awaiter(this, void 0, void 0, function* () {\n        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n          const uId = typeof user === \"string\" ? user : user.uId;\n          yield this.userCollection.doc(uId).delete().then(() => {\n            resolve(true);\n          }).catch(error => {\n            reject(error);\n          });\n        }));\n      });\n\n      this.addNewUserEmail = email => __awaiter(this, void 0, void 0, function* () {\n        yield this.emailCollection.doc(email).set({\n          email\n        });\n      });\n    }\n\n  }\n\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.AngularFirestore), i0.ɵɵinject(i2.Router));\n  };\n\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: \"root\"\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module"}